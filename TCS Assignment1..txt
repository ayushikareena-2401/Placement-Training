TCS Assignment.


CS Coding Question Day 1 Slot 2 – Question 1

Given an integer array Arr of size N the task is to find the count of elements whose value is greater than all of its prior elements.

Note : 1st element of the array should be considered in the count of the result.

For example,
Arr[]={7,4,8,2,9}
As 7 is the first element, it will consider in the result.
8 and 9 are also the elements that are greater than all of its previous elements.
Since total of  3 elements is present in the array that meets the condition.
Hence the output = 3.
Example 1:

Input 
5 -> Value of N, represents size of Arr
7-> Value of Arr[0]
4 -> Value of Arr[1]
8-> Value of Arr[2]
2-> Value of Arr[3]
9-> Value of Arr[4]
Example 2:
5   -> Value of N, represents size of Arr
3  -> Value of Arr[0]
4 -> Value of Arr[1]
5 -> Value of Arr[2]
8 -> Value of Arr[3]
9 -> Value of Arr[4]

Output : 
5

Constraints

1<=N<=20
1<=Arr[i]<=10000


SOLUTION-


import java.io.*;
import java.util.*;

class Solution {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    System.out.println("Enter the size of the input array.");
    int size;
    size=sc.nextInt();
    int[] arr = new int[size];
    System.out.println("Enter the elements of the input array.");
    for(int i=0;i<size;i++) {   
        arr[i]=sc.nextInt();
    }
    int count=1;
    for(int i=1;i<size;i++) {
      if(arr[i]>arr[i-1]) {
         count++;
      }
    }
    System.out.println("Output :"+count);
  }
}












TCS Coding Question Day 1 Slot 2 – Question 2


A parking lot in a mall has RxC number of parking spaces. Each parking space will either be  empty(0) or full(1). The status (0/1) of a parking space is represented as the element of the matrix. The task is to find index of the prpeinzta row(R) in the parking lot that has the most of the parking spaces full(1).

Note :
RxC- Size of the matrix
Elements of the matrix M should be only 0 or 1.

Example 1:
Input :
3   -> Value of R(row)
3    -> value of C(column)
[0 1 0 1 1 0 1 1 1] -> Elements of the array M[R][C] where each element is separated by new line.
Output :
3  -> Row 3 has maximum number of 1’s
Example 2:
input :
4 -> Value of R(row)
3 -> Value of C(column)
[0 1 0 1 1 0 1 0 1 1 1 1] -> Elements of the array M[R][C]
Output :
4  -> Row 4 has maximum number of 1’s


SOLUTION -

import java.io.*;
import java.util.*;

class Solution{
  public static void main(String[] a) {
   Scanner sc = new Scanner(System.in);
   int r,c;
   System.out.println("Enter the number of rows of the input matrix.");
   r= sc.nextInt();
   System.out.println("Enter the number of columns of the input matrix.");
   c= sc.nextInt();
   int[][] arr = new int[r][c];
   int max=0,index=-1;
   System.out.println("Enter the elements the input matrix.");
   for(int i=0;i<r;i++) {
      for(int j=0;j<c;j++) {
        arr[i][j]=sc.nextInt();
      }
   }
   for(int i=0;i<r;i++) {
     int count=0;
     for(int j=0;j<c;j++) { 
       if(arr[i][j]==1) {
         count++;
        }
     }
     if(max<count) {
         index=i;
     }
   }
     System.out.println(index+1);
   }
} 
  
   






TCS Coding Question Day 2 Slot 1 – Question 1

A party has been organised on cruise. The party is organised for a limited time(T). The number of guests entering (E[i]) and leaving (L[i]) the party at every hour is represented as elements of the array. The task is to find the maximum number of guests present on the cruise at any given instance within T hours.

Example 1:
Input :

5    -> Value of T
[7,0,5,1,3]  -> E[], Element of E[0] to E[N-1], where input each element is separated by new line 
[1,2,1,3,4]   -> L[], Element of L[0] to L[N-1], while input each element is separate by new line.
Output :
8     -> Maximum number of guests on cruise at an instance.

Explanation:

1st hour:
Entry : 7 Exit: 1
No. of guests on ship : 6

2nd hour :
Entry : 0 Exit : 2
No. of guests on ship : 6-2=4

Hour 3:
Entry: 5 Exit: 1
No. of guests on ship : 4+5-1=8

Hour 4:
Entry : 1 Exit : 3
No. of guests on ship : 8+1-3=6

Hour 5:
Entry : 3 Exit: 4
No. of guests on ship: 6+3-4=5
Hence, the maximum number of guests within 5 hours is 8.


SOLUTION -

import java.io.*;
import java.util.*;

class Main {
  public static void main(String[] a) {
   Scanner sc = new Scanner(System.in);
   System.out.println("Enter the size of the input array.");
   int size=sc.nextInt();
   int max=0;
   int[] e = new int[size];
   int[] l = new int[size];
   System.out.println("Enter the elements of the entry array.");
   for(int i=0;i<size;i++) {
     e[i]=sc.nextInt();
   }
    System.out.println("Enter the elements of the leaving array.");
   for(int i=0;i<size;i++) {
     l[i]=sc.nextInt();
   }
   int sum=0,ans=0;
   for(int i=0;i<size;i++) {
     sum+=e[i];
     sum-=l[i];
     max=Math.max(sum,max);
   }
   System.out.println("Output - "+max);
  }
}













TCS Coding Question Day 2 Slot 1 – Question 2
At a fun fair, a street vendor is selling different colours of balloons. He sells N number of different colours of balloons (B[]). The task is to find the colour (odd) of the balloon which is present odd number of times in the bunch of balloons.

Note: If there is more than one colour which is odd in number, then the first colour in the array which is present odd number of times is displayed. The colours of the balloons can all be either upper case or lower case in the array. If all the inputs are even in number, display the message “All are even”.

Example 1:

7  -> Value of N
[r,g,b,b,g,y,y]  -> B[] Elements B[0] to B[N-1], where each input element is sepārated by ṉew line.
Output :

r -> [r,g,b,b,g,y,y]  -> “r” colour balloon is present odd number of times in the bunch.
Explanation:
From the input array above:

r: 1 balloon 
g: 2 balloons
b:  2 balloons
y : 2 balloons
Hence , r is only the balloon which is odd in number.
Example 2:
Input:

10 -> Value of N
[a,b,b,b,c,c,c,a,f,c] -> B[], elements B[0] to B[N-1] where input each element is separated by new line.
Output :
b-> ‘b’ colour balloon is present odd number of times in the bunch.
From the input array above:

a: 2 balloons
b: 3 balloons 
c: 4 balloons 
f: 1 balloons 
Here, both ‘b’ and ‘f’ have odd number of balloons. But ‘b’ colour balloon occurs first.
Hence , b is the output.

Input Format for testing
The candidate has to write the code to accept: 2 input 

First input: Accept value for number of N(Positive integer number).
Second Input : Accept N number of character values (B[]), where each value is separated by a new line.
Output format for testing
The output should be a single literal (Check the output in example 1 and example 2)

Constraints:

3<=N<=50
B[i]={{a-z} or {A-Z}}

SOLUTION-

import java.io.*;
import java.util.*;

class Main {
  public static void main(String[] a) {
   int size=0,flag=0;
   Scanner sc= new Scanner(System.in);
   System.out.println("Enter the size of the input array.");
   size= sc.nextInt();
   char[] arr = new char[size];
   int[] s = new int[26];
   int[] c = new int[26];
   System.out.println("Enter the elements of the array.");
   for(int i=0;i<size;i++) {
      arr[i]=sc.next().charAt(0);
      if(arr[i]>='a' && arr[i]<='z') {
          s[arr[i]-'a']++;
       } else if(arr[i]>='A' && arr[i]<='Z') {
          c[arr[i]-'A']++;
       }
    }
    for(int i=0;i<26;i++) {
       if(c[i]+s[i]%2!=0) {   
         System.out.println((char)(i+'a'));
         flag=1;
         break;
       }
    }
     if(flag==0) {
        System.out.println("All Even elements.");
     }
    }
   }    
